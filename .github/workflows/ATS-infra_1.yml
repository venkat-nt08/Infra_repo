name: EC2 Infra Bootstrap

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master

jobs:
  prepare-ec2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - name: Bootstrap EC2 for Frontend + Backend + PostgreSQL
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: false
          script: |
            set -eo pipefail
            echo "=== 🚀 EC2 Infra Bootstrap started at $(date) ==="

            # 1) Basic package setup
            echo "Updating apt and installing base packages..."
            sudo DEBIAN_FRONTEND=noninteractive apt-get update -y || true
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" curl gnupg2 ca-certificates lsb-release apt-transport-https build-essential python3 python3-venv python3-pip git postgresql postgresql-contrib || true

            # 2) Install Nginx
            if ! command -v nginx >/dev/null 2>&1; then
              echo "Installing Nginx..."
              sudo apt-get install -y nginx
              sudo systemctl enable nginx
              sudo systemctl start nginx
            else
              echo "Nginx already installed."
            fi

            # 3) Install Node.js 18
            if ! command -v node >/dev/null 2>&1; then
              echo "Installing Node.js 18..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            else
              echo "Node.js present: $(node -v)"
            fi

            # 4) Configure PostgreSQL DB and user
            echo "Configuring PostgreSQL database and user..."
            sudo -u postgres psql <<EOF
            DO
            \$do\$
            BEGIN
              IF NOT EXISTS (SELECT FROM pg_database WHERE datname = 'ring') THEN
                CREATE DATABASE ring;
              END IF;
              IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'postgres') THEN
                CREATE USER postgres WITH PASSWORD 'postgres';
              ELSE
                ALTER USER postgres WITH PASSWORD 'postgres';
              END IF;
              GRANT ALL PRIVILEGES ON DATABASE ring TO postgres;
              ALTER USER postgres CREATEDB;
            END
            \$do\$;
            \q
            EOF
            
            # 5) Update pg_hba.conf to use md5 authentication
            PG_HBA=$(sudo -u postgres psql -t -P format=unaligned -c "SHOW hba_file;")
            sudo sed -i.bak -r "s/^(local\s+all\s+postgres\s+)(peer|scram-sha-256)/\1md5/" "$PG_HBA"
            sudo sed -i -r "s/^(local\s+all\s+all\s+)(peer|scram-sha-256)/\1md5/" "$PG_HBA"
            sudo sed -i -r "s/^(host\s+all\s+all\s+127\.0\.0\.1\/32\s+)(scram-sha-256|peer|trust)/\1md5/" "$PG_HBA"
            sudo sed -i -r "s/^(host\s+all\s+all\s+::1\/128\s+)(scram-sha-256|peer|trust)/\1md5/" "$PG_HBA"

            sudo systemctl restart postgresql

            # 6) Prepare app directories
            echo "Creating application directories..."
            sudo mkdir -p /var/www/Elden-ATS/{Frontend-ATS,Backend-ATS}
            sudo chown -R ubuntu:ubuntu /var/www/Elden-ATS
            sudo chmod -R 755 /var/www/Elden-ATS

            # 7) Create or update Nginx config if not exists
            NGINX_SITE="/etc/nginx/sites-available/elden-ats"
            if [ ! -f "$NGINX_SITE" ]; then
              echo "Creating new Nginx site config..."
              sudo tee "$NGINX_SITE" > /dev/null <<NGINXEOF
            server {
                listen 80;
                server_name _;

                root /var/www/Elden-ATS/Frontend-ATS/dist;
                index index.html;

                location / {
                    try_files \$uri \$uri/ /index.html;
                }

                location /backend/ {
                    rewrite ^/backend/?(.*)\$ /\$1 break;
                    proxy_pass http://127.0.0.1:8000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                }

                error_page 500 502 503 504 /50x.html;
                location = /50x.html { root /usr/share/nginx/html; }
            }
            NGINXEOF
              sudo ln -sf /etc/nginx/sites-available/elden-ats /etc/nginx/sites-enabled/elden-ats
              sudo rm -f /etc/nginx/sites-enabled/default
              sudo nginx -t && sudo systemctl restart nginx
            fi

            # 8) Setup Backend Python virtual environment if missing
            VENV_DIR="/var/www/Elden-ATS/Backend-ATS/.venv"
            if [ ! -d "$VENV_DIR" ]; then
              echo "Creating backend Python virtualenv..."
              sudo -u ubuntu python3 -m venv "$VENV_DIR"
            fi

            # 9) Run Alembic migrations as ubuntu user
            echo "Applying database migrations..."
            sudo -u ubuntu bash -c "
            source /var/www/Elden-ATS/Backend-ATS/.venv/bin/activate &&
            cd /var/www/Elden-ATS/Backend-ATS &&
            alembic upgrade head
            "

            # 10) Setup systemd backend service if missing
            SERVICE_FILE="/etc/systemd/system/ats-backend.service"
            if [ ! -f "$SERVICE_FILE" ]; then
              echo "Creating systemd service for backend..."
              sudo tee "$SERVICE_FILE" > /dev/null <<SERVICEEOF
            [Unit]
            Description=ATS FastAPI backend (uvicorn)
            After=network.target
            
            [Service]
            User=ubuntu
            Group=www-data
            WorkingDirectory=/var/www/Elden-ATS/Backend-ATS
            Environment=PYTHONUNBUFFERED=1
            ExecStart=/bin/bash -lc 'source /var/www/Elden-ATS/Backend-ATS/.venv/bin/activate && exec /var/www/Elden-ATS/Backend-ATS/.venv/bin/uvicorn app.main:app --host 127.0.0.1 --port 8000'
            Restart=on-failure
            RestartSec=5s
            
            [Install]
            WantedBy=multi-user.target
            SERVICEEOF
              sudo systemctl daemon-reload
              sudo systemctl enable ats-backend || true
            fi

            # 11) Allow firewall ports
            if command -v ufw >/dev/null 2>&1; then
              sudo ufw allow 'Nginx Full' || true
              sudo ufw allow OpenSSH || true
              sudo ufw --force enable
            fi

            echo "=== ✅ EC2 Infra Bootstrap Completed Successfully ==="
            echo "🗂  Folders: /var/www/Elden-ATS/"
            echo "🌐 Nginx site: /etc/nginx/sites-available/elden-ats"
            echo "🐘 PostgreSQL DB: ring"
            echo "👤 DB User: postgres"
            echo "🔑 DB Password: postgres"
            echo "💡 Next steps:"
            echo "   1️⃣ Deploy frontend.yml"
            echo "   2️⃣ Deploy backend.yml"
            echo "   3️⃣ Backend env DB_URL=postgresql://postgres:postgres@localhost/ring"

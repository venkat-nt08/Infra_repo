name: EC2 Infra Bootstrap

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  prepare-ec2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - name: Bootstrap EC2 for Frontend + Backend + PostgreSQL
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: false
          script: |
            set -eo pipefail
            echo "=== ðŸš€ EC2 Infra Bootstrap started at $(date) ==="

            # Update and install base packages
            echo "Updating apt and installing base packages..."
            sudo DEBIAN_FRONTEND=noninteractive apt-get update -y || true
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
              -o Dpkg::Options::="--force-confdef" \
              -o Dpkg::Options::="--force-confold" \
              curl gnupg2 ca-certificates lsb-release apt-transport-https \
              build-essential python3 python3-venv python3-pip git postgresql postgresql-contrib || true

            # Install Nginx
            if ! command -v nginx >/dev/null 2>&1; then
              echo "Installing nginx"
              sudo apt-get install -y nginx
              sudo systemctl enable nginx
              sudo systemctl start nginx
            else
              echo "Nginx already installed"
            fi

            # Install Node.js 18
            if ! command -v node >/dev/null 2>&1; then
              echo "Installing Node.js 18"
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            else
              echo "Node.js present: $(node -v)"
            fi

            # Initialize PostgreSQL cluster if missing
            PG_VERSION=$(psql --version | grep -oP '\d+' | head -1)
            if [ -z "$PG_VERSION" ]; then
              PG_VERSION=14
            fi
            echo "PostgreSQL version detected: $PG_VERSION"
            
            CLUSTER_STATUS=$(pg_lsclusters -h | awk -v ver="$PG_VERSION" '$1==ver && $2=="main" {print $4}')
            if [ "$CLUSTER_STATUS" != "online" ]; then
              echo "PostgreSQL main cluster not running or missing, creating cluster..."
              sudo pg_createcluster $PG_VERSION main --start
            else
              echo "PostgreSQL main cluster running"
            fi

            # Confirm cluster started
            pg_lsclusters

            # Prepare directories for app
            sudo mkdir -p /var/www/Elden-ATS/{Frontend-ATS,Backend-ATS}
            sudo chown -R ubuntu:ubuntu /var/www/Elden-ATS
            sudo chmod -R 755 /var/www/Elden-ATS

            # Modify pg_hba.conf to md5 authentication
            PG_HBA=$(sudo -u postgres psql -t -P format=unaligned -c "SHOW hba_file;")
            sudo sed -i.bak 's/^local\s\+all\s\+postgres\s\+peer/local all postgres md5/' "$PG_HBA"
            sudo sed -i -r 's/^(local\s+all\s+all\s+)(peer|trust)/\1md5/' "$PG_HBA"
            sudo sed -i -r 's/^(host\s+all\s+all\s+127\.0\.0\.1\/32\s+)(peer|trust)/\1md5/' "$PG_HBA"
            sudo sed -i -r 's/^(host\s+all\s+all\s+::1\/128\s+)(peer|trust)/\1md5/' "$PG_HBA"
            sudo systemctl reload postgresql

            # Configure PostgreSQL DB and user with explicit password for automation
            echo "Configuring PostgreSQL database and user..."
            sudo -u postgres PGPASSWORD=postgres psql <<EOF
            DO
            \$do\$
            BEGIN
              IF NOT EXISTS (SELECT FROM pg_database WHERE datname = 'ring') THEN
                CREATE DATABASE ring;
              END IF;
              IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'postgres') THEN
                CREATE USER postgres WITH PASSWORD 'postgres';
              ELSE
                ALTER USER postgres WITH PASSWORD 'postgres';
              END IF;
              GRANT ALL PRIVILEGES ON DATABASE ring TO postgres;
              ALTER USER postgres CREATEDB;
            END
            \$do\$;
            \q
            EOF

            # Tune postgresql.conf settings
            PG_CONF="/etc/postgresql/$PG_VERSION/main/postgresql.conf"
            if [ -f "$PG_CONF" ]; then
              sudo sed -i "s/^#listen_addresses =.*/listen_addresses = 'localhost'/" "$PG_CONF"
              sudo sed -i "s/^#max_connections =.*/max_connections = 100/" "$PG_CONF"
              sudo sed -i "s/^#shared_buffers =.*/shared_buffers = 256MB/" "$PG_CONF"
              sudo systemctl restart postgresql
            fi

            # Set up Nginx config if missing, enable and restart
            NGINX_SITE="/etc/nginx/sites-available/elden-ats"
            if [ ! -f "$NGINX_SITE" ]; then
              echo "Creating Nginx site config"
              sudo tee "$NGINX_SITE" > /dev/null <<NGINXEOF
            server {
                listen 80;
                server_name _;

                root /var/www/Elden-ATS/Frontend-ATS/dist;
                index index.html;

                location / {
                    try_files \$uri \$uri/ /index.html;
                }

                location /backend/ {
                    rewrite ^/backend/?(.*)\$ /\$1 break;
                    proxy_pass http://127.0.0.1:8000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                }

                error_page 500 502 503 504 /50x.html;
                location = /50x.html { root /usr/share/nginx/html; }
            }
            NGINXEOF
              sudo ln -sf /etc/nginx/sites-available/elden-ats /etc/nginx/sites-enabled/elden-ats
              sudo rm -f /etc/nginx/sites-enabled/default
              sudo nginx -t && sudo systemctl restart nginx
            else
              echo "Nginx site config already present"
            fi

            # Setup Backend Python venv or reuse
            VENV_DIR="/var/www/Elden-ATS/Backend-ATS/.venv"
            if [ ! -d "$VENV_DIR" ]; then
              echo "Creating backend Python virtual environment..."
              sudo -u ubuntu python3 -m venv "$VENV_DIR"
            else
              echo "Backend virtual environment exists"
            fi

            # Run Alembic migrations as ubuntu user
            echo "Running Alembic migrations..."
            sudo -u ubuntu bash -c "
            source /var/www/Elden-ATS/Backend-ATS/.venv/bin/activate &&
            cd /var/www/Elden-ATS/Backend-ATS &&
            alembic upgrade head
            "

            # Setup backend systemd service
            SERVICE_FILE="/etc/systemd/system/ats-backend.service"
            if [ ! -f "$SERVICE_FILE" ]; then
              echo "Creating systemd backend service..."
              sudo tee "$SERVICE_FILE" > /dev/null <<SERVICEEOF
            [Unit]
            Description=ATS FastAPI backend (uvicorn)
            After=network.target postgresql.service
            Wants=postgresql.service

            [Service]
            User=ubuntu
            Group=www-data
            WorkingDirectory=/var/www/Elden-ATS/Backend-ATS
            Environment="PATH=/var/www/Elden-ATS/Backend-ATS/.venv/bin"
            Environment="PYTHONUNBUFFERED=1"
            ExecStart=/var/www/Elden-ATS/Backend-ATS/.venv/bin/uvicorn app.main:app --host 127.0.0.1 --port 8000
            Restart=always
            RestartSec=5s

            [Install]
            WantedBy=multi-user.target
            SERVICEEOF
              sudo systemctl daemon-reload
              sudo systemctl enable ats-backend
            else
              echo "Backend service already exists"
            fi

            # Setup firewall with ufw if available
            if command -v ufw >/dev/null 2>&1; then
              echo "Configuring firewall..."
              sudo ufw allow 'Nginx Full' || true
              sudo ufw allow OpenSSH || true
              sudo ufw --force enable || true
            else
              echo "No ufw found, skipping firewall setup"
            fi

            echo "=== âœ… EC2 Infra Bootstrap Completed Successfully ==="
            echo "Frontend and Backend deployed"

name: EC2 Infra Bootstrap

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master

jobs:
  prepare-ec2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - name: Bootstrap EC2 for Frontend + Backend + PostgreSQL
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: false
          script: |
            set -eo pipefail
            echo "=== ðŸš€ EC2 Infra Bootstrap started at $(date) ==="

            # 1) Basic package setup
            echo "Updating apt and installing base packages..."
            sudo DEBIAN_FRONTEND=noninteractive apt-get update -y || true
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" curl gnupg2 ca-certificates lsb-release apt-transport-https build-essential python3 python3-venv python3-pip git postgresql postgresql-contrib || true

            # 2) Install Nginx
            if ! command -v nginx >/dev/null 2>&1; then
              echo "Installing Nginx..."
              sudo apt-get install -y nginx
              sudo systemctl enable nginx
              sudo systemctl start nginx
            else
              echo "Nginx already installed."
            fi

            # 3) Install Node.js 18
            if ! command -v node >/dev/null 2>&1; then
              echo "Installing Node.js 18..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            else
              echo "Node.js present: $(node -v)"
            fi

            # 4) Prepare app directories
            echo "Creating application directories..."
            sudo mkdir -p /var/www/Elden-ATS/{Frontend-ATS,Backend-ATS}
            sudo chown -R ubuntu:ubuntu /var/www/Elden-ATS
            sudo chmod -R 755 /var/www/Elden-ATS

            # 5) Temporarily allow trust auth for postgres user to create DB and user
            PG_HBA=$(sudo -u postgres psql -t -P format=unaligned -c "SHOW hba_file;")
            sudo sed -i.bak 's/^local\s*all\s*postgres\s*md5$/local all postgres trust/' "$PG_HBA"
            sudo systemctl reload postgresql

            # 6) Configure PostgreSQL DB and user
            echo "Configuring PostgreSQL database and user..."
            sudo -u postgres psql <<EOF
            DO
            \$do\$
            BEGIN
              IF NOT EXISTS (SELECT FROM pg_database WHERE datname = 'ring') THEN
                CREATE DATABASE ring;
              END IF;
              IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'postgres') THEN
                CREATE USER postgres WITH PASSWORD 'postgres';
              ELSE
                ALTER USER postgres WITH PASSWORD 'postgres';
              END IF;
              GRANT ALL PRIVILEGES ON DATABASE ring TO postgres;
              ALTER USER postgres CREATEDB;
            END
            \$do\$;
            \q
            EOF

            # 7) Revert pg_hba.conf auth back to md5 for security
            sudo sed -i.bak 's/^local\s*all\s*postgres\s*trust$/local all postgres md5/' "$PG_HBA"
            sudo systemctl reload postgresql

            # 8) Tune postgresql.conf for localhost listen and resources
            PG_CONF="/etc/postgresql/14/main/postgresql.conf"
            if [ -f "$PG_CONF" ]; then
              sudo sed -i "s/^#listen_addresses =.*/listen_addresses = 'localhost'/" "$PG_CONF"
              sudo sed -i "s/^#max_connections =.*/max_connections = 100/" "$PG_CONF"
              sudo sed -i "

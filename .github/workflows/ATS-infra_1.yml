name: EC2 Infra Bootstrap

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  prepare-ec2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - name: Bootstrap EC2 for Frontend + Backend + PostgreSQL
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: false
          script: |
            set -eo pipefail
            echo "=== 🚀 EC2 Infra Bootstrap started at $(date) ==="

            # ---------------------------
            # 1) Basic package setup
            # ---------------------------
            echo "Updating apt and installing base packages..."
            sudo DEBIAN_FRONTEND=noninteractive apt-get update -y || true
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" curl gnupg2 ca-certificates lsb-release apt-transport-https build-essential || true

            # ---------------------------
            # 2) Install Nginx
            # ---------------------------
            if ! command -v nginx >/dev/null 2>&1; then
              echo "Installing Nginx..."
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" nginx
              sudo systemctl enable nginx
              sudo systemctl start nginx
            else
              echo "Nginx already installed."
            fi

            # ---------------------------
            # 3) Install Node.js 18
            # ---------------------------
            if ! command -v node >/dev/null 2>&1; then
              echo "Installing Node.js 18..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y nodejs
            else
              echo "Node.js present: $(node -v)"
            fi

            # ---------------------------
            # 4) Install Python 3
            # ---------------------------
            if ! command -v python3 >/dev/null 2>&1; then
              echo "Installing Python3..."
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3 python3-venv python3-pip
            else
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3-venv python3-pip || true
              echo "Python3 present: $(python3 -V)"
            fi

            # ---------------------------
            # 5) Install Git
            # ---------------------------
            if ! command -v git >/dev/null 2>&1; then
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y git
            fi

            # ---------------------------
            # 6) Install PostgreSQL 14+
            # ---------------------------
            if ! command -v psql >/dev/null 2>&1; then
              echo "Installing PostgreSQL..."
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y postgresql postgresql-contrib
              sudo systemctl enable postgresql
              sudo systemctl start postgresql
              sleep 3
            else
              echo "PostgreSQL already installed."
            fi

            # ---------------------------
            # 7) Configure PostgreSQL DB and user
            # ---------------------------
            echo "Configuring PostgreSQL database and user..."
            
            # Wait for PostgreSQL to be ready
            echo "Waiting for PostgreSQL to be ready..."
            for i in {1..30}; do
              if sudo -u postgres psql -c "SELECT 1" >/dev/null 2>&1; then
                echo "PostgreSQL is ready!"
                break
              fi
              echo "Waiting for PostgreSQL... ($i/30)"
              sleep 2
            done

            # Create database if it doesn't exist
            echo "Creating database 'ring' if it doesn't exist..."
            sudo -u postgres psql -tc "SELECT 1 FROM pg_database WHERE datname = 'ring'" | grep -q 1 || \
            sudo -u postgres psql -c "CREATE DATABASE ring;"

            # Note: 'postgres' user already exists by default in PostgreSQL
            # Set password for postgres user
            echo "Setting password for postgres user..."
            sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres';"

            # Grant privileges
            echo "Granting privileges..."
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ring TO postgres;"
            sudo -u postgres psql -c "ALTER USER postgres CREATEDB;"

            # Verify database creation
            echo "Verifying database setup..."
            sudo -u postgres psql -l | grep ring && echo "✓ Database 'ring' exists" || echo "✗ Database 'ring' NOT found"
            sudo -u postgres psql -c "\du" | grep postgres && echo "✓ User 'postgres' exists" || echo "✗ User 'postgres' NOT found"

            # ---------------------------
            # 8) Tune PostgreSQL config
            # ---------------------------
            echo "Configuring PostgreSQL settings..."
            
            # Detect PostgreSQL version
            PG_VERSION=$(psql --version | grep -oP '\d+' | head -1)
            PG_CONF="/etc/postgresql/${PG_VERSION}/main/postgresql.conf"
            HBA_CONF="/etc/postgresql/${PG_VERSION}/main/pg_hba.conf"
            
            echo "PostgreSQL version detected: ${PG_VERSION}"
            echo "Config file: ${PG_CONF}"
            
            if [ -f "$PG_CONF" ]; then
              echo "Updating postgresql.conf..."
              sudo sed -i "s/^#\?listen_addresses =.*/listen_addresses = 'localhost'/" "$PG_CONF"
              sudo sed -i "s/^#\?max_connections =.*/max_connections = 100/" "$PG_CONF"
              sudo sed -i "s/^#\?shared_buffers =.*/shared_buffers = 256MB/" "$PG_CONF"
              echo "✓ postgresql.conf updated"
            else
              echo "⚠ postgresql.conf not found at $PG_CONF"
            fi

            if [ -f "$HBA_CONF" ]; then
              echo "Updating pg_hba.conf..."
              # Backup original
              sudo cp "$HBA_CONF" "${HBA_CONF}.backup.$(date +%Y%m%d)"
              
              # Add authentication rules if they don't exist
              if ! sudo grep -q "^local.*all.*postgres.*md5" "$HBA_CONF"; then
                echo "local   all             postgres                                md5" | sudo tee -a "$HBA_CONF" > /dev/null
                echo "✓ Added postgres authentication rule"
              fi
              
              if ! sudo grep -q "^local.*all.*all.*md5" "$HBA_CONF"; then
                echo "local   all             all                                     md5" | sudo tee -a "$HBA_CONF" > /dev/null
                echo "✓ Added all users authentication rule"
              fi
              
              echo "✓ pg_hba.conf updated"
            else
              echo "⚠ pg_hba.conf not found at $HBA_CONF"
            fi
            
            echo "Restarting PostgreSQL..."
            sudo systemctl restart postgresql
            sleep 3
            
            # Verify PostgreSQL is running
            if sudo systemctl is-active --quiet postgresql; then
              echo "✓ PostgreSQL is running"
            else
              echo "✗ PostgreSQL failed to restart"
            fi

            # ---------------------------
            # 9) Test database connection
            # ---------------------------
            echo "Testing database connection..."
            if PGPASSWORD=postgres psql -h localhost -U postgres -d ring -c "SELECT version();" >/dev/null 2>&1; then
              echo "✓ Successfully connected to 'ring' database"
              PGPASSWORD=postgres psql -h localhost -U postgres -d ring -c "SELECT version();" | head -3
            else
              echo "⚠ Could not connect to database with password. Trying without password..."
              if sudo -u postgres psql -d ring -c "SELECT version();" >/dev/null 2>&1; then
                echo "✓ Connected to 'ring' database (peer authentication)"
                sudo -u postgres psql -d ring -c "SELECT version();" | head -3
              else
                echo "✗ Database connection test failed"
              fi
            fi

            # ---------------------------
            # 10) Prepare app directories
            # ---------------------------
            echo "Creating application directories..."
            sudo mkdir -p /var/www/Elden-ATS/{Frontend-ATS,Backend-ATS}
            sudo chown -R ubuntu:ubuntu /var/www/Elden-ATS
            sudo chmod -R 755 /var/www/Elden-ATS
            echo "✓ Directories created: /var/www/Elden-ATS/"

            # ---------------------------
            # 11) Create default Nginx config if not exists
            # ---------------------------
            NGINX_SITE="/etc/nginx/sites-available/elden-ats"
            if [ ! -f "$NGINX_SITE" ]; then
              echo "Creating Nginx site configuration..."
              sudo tee "$NGINX_SITE" > /dev/null <<'NGINXEOF'
            server {
                listen 80;
                server_name _;

                # Frontend
                root /var/www/Elden-ATS/Frontend-ATS/dist;
                index index.html;

                # Frontend routes
                location / {
                    try_files $uri $uri/ /index.html;
                }

                # Backend API proxy
                location /backend/ {
                    rewrite ^/backend/(.*)$ /$1 break;
                    proxy_pass http://127.0.0.1:8000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                    proxy_read_timeout 300;
                    proxy_connect_timeout 300;
                }

                # Error pages
                error_page 500 502 503 504 /50x.html;
                location = /50x.html {
                    root /usr/share/nginx/html;
                }

                # Logging
                access_log /var/log/nginx/elden-ats-access.log;
                error_log /var/log/nginx/elden-ats-error.log;
            }
            NGINXEOF
              
              sudo ln -sf /etc/nginx/sites-available/elden-ats /etc/nginx/sites-enabled/elden-ats
              sudo rm -f /etc/nginx/sites-enabled/default
              
              echo "Testing Nginx configuration..."
              if sudo nginx -t; then
                echo "✓ Nginx configuration is valid"
                sudo systemctl restart nginx
                echo "✓ Nginx restarted"
              else
                echo "✗ Nginx configuration test failed"
              fi
            else
              echo "✓ Nginx site configuration already exists"
            fi

            # ---------------------------
            # 12) Python venv + systemd for backend
            # ---------------------------
            VENV_DIR="/var/www/Elden-ATS/Backend-ATS/.venv"
            if [ ! -d "$VENV_DIR" ]; then
              echo "Creating backend Python virtualenv..."
              cd /var/www/Elden-ATS/Backend-ATS
              python3 -m venv .venv
              chown -R ubuntu:ubuntu .venv
              echo "✓ Virtual environment created"
            else
              echo "✓ Virtual environment already exists"
            fi

            SERVICE_FILE="/etc/systemd/system/ats-backend.service"
            if [ ! -f "$SERVICE_FILE" ]; then
              echo "Creating systemd service for backend..."
              sudo tee "$SERVICE_FILE" > /dev/null <<'SERVICEEOF'
            [Unit]
            Description=ATS FastAPI backend (uvicorn)
            After=network.target postgresql.service
            Wants=postgresql.service

            [Service]
            Type=simple
            User=ubuntu
            Group=www-data
            WorkingDirectory=/var/www/Elden-ATS/Backend-ATS
            Environment="PATH=/var/www/Elden-ATS/Backend-ATS/.venv/bin"
            Environment="PYTHONUNBUFFERED=1"
            ExecStart=/var/www/Elden-ATS/Backend-ATS/.venv/bin/uvicorn app.main:app --host 127.0.0.1 --port 8000
            Restart=always
            RestartSec=5s

            [Install]
            WantedBy=multi-user.target
            SERVICEEOF
              
              sudo systemctl daemon-reload
              sudo systemctl enable ats-backend
              echo "✓ Backend service created and enabled"
            else
              echo "✓ Backend service already exists"
            fi

            # ---------------------------
            # 13) Firewall rules
            # ---------------------------
            if command -v ufw >/dev/null 2>&1; then
              echo "Configuring firewall..."
              sudo ufw allow 'Nginx Full' || true
              sudo ufw allow OpenSSH || true
              sudo ufw --force enable || true
              echo "✓ Firewall configured"
            else
              echo "⚠ UFW not available"
            fi

            # ---------------------------
            # 14) Final verification
            # ---------------------------
            echo ""
            echo "=== ✅ EC2 Infra Bootstrap Completed Successfully ==="
            echo ""
            echo "📊 Installation Summary:"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "🌐 Nginx:        $(nginx -v 2>&1)"
            echo "🟢 Node.js:      $(node -v)"
            echo "🐍 Python:       $(python3 --version)"
            echo "🐘 PostgreSQL:   $(psql --version)"
            echo "📦 Git:          $(git --version)"
            echo ""
            echo "📁 Directories:"
            echo "   Frontend:     /var/www/Elden-ATS/Frontend-ATS/"
            echo "   Backend:      /var/www/Elden-ATS/Backend-ATS/"
            echo ""
            echo "🗄️  Database:"
            echo "   Database:     ring"
            echo "   User:         postgres"
            echo "   Password:     postgres"
            echo "   Host:         localhost"
            echo "   Port:         5432"
            echo ""
            echo "🔧 Services Status:"
            sudo systemctl is-active nginx && echo "   ✓ Nginx:      Running" || echo "   ✗ Nginx:      Stopped"
            sudo systemctl is-active postgresql && echo "   ✓ PostgreSQL: Running" || echo "   ✗ PostgreSQL: Stopped"
            sudo systemctl is-enabled ats-backend && echo "   ✓ Backend:    Enabled (not started yet)" || echo "   ✗ Backend:    Not enabled"
            echo ""
            echo "🌐 Access URLs:"
            PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4 || echo "N/A")
            echo "   Frontend:     http://${PUBLIC_IP}"
            echo "   Backend API:  http://${PUBLIC_IP}/backend/"
            echo "   API Docs:     http://${PUBLIC_IP}/backend/docs"
            echo ""
            echo "📝 Next Steps:"
            echo "   1️⃣  Deploy backend:  Run backend-deploy.yml workflow"
            echo "   2️⃣  Deploy frontend: Run frontend-deploy.yml workflow"
            echo "   3️⃣  Test connection:  curl http://${PUBLIC_IP}"
            echo ""
            echo "🔐 Database Connection String:"
            echo "   postgresql://postgres:postgres@localhost:5432/ring"
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "✅ Infrastructure setup complete!"
            echo "==================================================="

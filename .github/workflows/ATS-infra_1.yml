name: EC2 Infra Bootstrap

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  prepare-ec2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - name: Bootstrap EC2 for Frontend + Backend + PostgreSQL
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: false
          script: |
            set -eo pipefail
            echo "=== üöÄ EC2 Infra Bootstrap started at $(date) ==="

            # ---------------------------
            # 1) Basic package setup
            # ---------------------------
            echo "Updating apt and installing base packages..."
            sudo DEBIAN_FRONTEND=noninteractive apt-get update -y || true
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" curl gnupg2 ca-certificates lsb-release apt-transport-https build-essential || true

            # ---------------------------
            # 2) Install Nginx
            # ---------------------------
            if ! command -v nginx >/dev/null 2>&1; then
              echo "Installing Nginx..."
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" nginx
              sudo systemctl enable nginx
              sudo systemctl start nginx
            else
              echo "Nginx already installed."
            fi

            # ---------------------------
            # 3) Install Node.js 18
            # ---------------------------
            if ! command -v node >/dev/null 2>&1; then
              echo "Installing Node.js 18..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y nodejs
            else
              echo "Node.js present: $(node -v)"
            fi

            # ---------------------------
            # 4) Install Python 3
            # ---------------------------
            if ! command -v python3 >/dev/null 2>&1; then
              echo "Installing Python3..."
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3 python3-venv python3-pip
            else
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3-venv python3-pip || true
              echo "Python3 present: $(python3 -V)"
            fi

            # ---------------------------
            # 5) Install Git
            # ---------------------------
            if ! command -v git >/dev/null 2>&1; then
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y git
            fi

            # ---------------------------
            # 6) Install PostgreSQL 14+
            # ---------------------------
            if ! command -v psql >/dev/null 2>&1; then
              echo "Installing PostgreSQL..."
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y postgresql postgresql-contrib
              echo "PostgreSQL package installed"
            else
              echo "PostgreSQL already installed: $(psql --version)"
            fi

            # Ensure PostgreSQL service is enabled and started
            echo "Ensuring PostgreSQL service is running..."
            sudo systemctl enable postgresql
            sudo systemctl start postgresql
            
            # Wait longer for PostgreSQL to fully start
            echo "Waiting for PostgreSQL to start (up to 60 seconds)..."
            for i in {1..60}; do
              if sudo systemctl is-active --quiet postgresql; then
                echo "‚úì PostgreSQL service is active (attempt $i)"
                break
              fi
              echo "Waiting for PostgreSQL service... ($i/60)"
              sleep 1
            done

            # Additional wait for socket to be ready
            echo "Waiting for PostgreSQL socket to be available..."
            for i in {1..30}; do
              if sudo -u postgres psql -c "SELECT 1" >/dev/null 2>&1; then
                echo "‚úì PostgreSQL is accepting connections (attempt $i)"
                break
              fi
              if [ -S /var/run/postgresql/.s.PGSQL.5432 ]; then
                echo "‚úì Socket file exists, testing connection..."
              else
                echo "Waiting for socket file... ($i/30)"
              fi
              sleep 2
            done

            # Check PostgreSQL status
            echo "PostgreSQL service status:"
            sudo systemctl status postgresql --no-pager -l || true
            
            # Check if socket exists
            echo "Checking PostgreSQL socket:"
            ls -la /var/run/postgresql/ || echo "Socket directory not found"
            
            # Check PostgreSQL logs if there's an issue
            if ! sudo -u postgres psql -c "SELECT 1" >/dev/null 2>&1; then
              echo "‚ö†Ô∏è PostgreSQL connection test failed. Checking logs..."
              sudo journalctl -u postgresql -n 50 --no-pager || true
              echo "Attempting to restart PostgreSQL..."
              sudo systemctl restart postgresql
              sleep 5
            fi

            # ---------------------------
            # 7) Configure PostgreSQL DB and user
            # ---------------------------
            echo "============================================="
            echo "Configuring PostgreSQL database and user..."
            echo "============================================="
            
            # Final connection test before proceeding
            if ! sudo -u postgres psql -c "SELECT 1" >/dev/null 2>&1; then
              echo "‚ùå ERROR: Cannot connect to PostgreSQL"
              echo "Checking PostgreSQL process:"
              ps aux | grep postgres || true
              echo ""
              echo "Checking PostgreSQL service:"
              sudo systemctl status postgresql --no-pager || true
              echo ""
              echo "PostgreSQL may not be running. Attempting manual start..."
              sudo pg_ctlcluster $(pg_lsclusters -h | head -1 | awk '{print $1, $2}') start || true
              sleep 5
              
              if ! sudo -u postgres psql -c "SELECT 1" >/dev/null 2>&1; then
                echo "‚ùå CRITICAL: PostgreSQL still not responding. Skipping database setup."
                echo "‚ö†Ô∏è  You will need to manually create the database later."
                echo "Manual commands:"
                echo "  sudo systemctl start postgresql"
                echo "  sudo -u postgres createdb ring"
                echo "  sudo -u postgres psql -c \"ALTER USER postgres WITH PASSWORD 'postgres';\""
              else
                echo "‚úì PostgreSQL connection successful after manual start"
              fi
            else
              echo "‚úì PostgreSQL connection verified"
            fi

            # Only proceed with database creation if PostgreSQL is responding
            if sudo -u postgres psql -c "SELECT 1" >/dev/null 2>&1; then
              # Create database if it doesn't exist
              echo "Creating database 'ring' if it doesn't exist..."
              if sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw ring; then
                echo "‚úì Database 'ring' already exists"
              else
                sudo -u postgres createdb ring && echo "‚úì Database 'ring' created successfully" || echo "‚úó Failed to create database"
              fi

              # Set password for postgres user
              echo "Setting password for postgres user..."
              sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres';" && \
                echo "‚úì Password set successfully" || echo "‚úó Failed to set password"

              # Grant privileges
              echo "Granting privileges..."
              sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ring TO postgres;" && \
                echo "‚úì Privileges granted" || echo "‚úó Failed to grant privileges"
              
              sudo -u postgres psql -c "ALTER USER postgres CREATEDB;" && \
                echo "‚úì CREATEDB privilege granted" || echo "‚úó Failed to grant CREATEDB"

              # Verify database creation
              echo ""
              echo "Verifying database setup..."
              echo "Databases:"
              sudo -u postgres psql -l | grep ring && echo "  ‚úì Database 'ring' exists" || echo "  ‚úó Database 'ring' NOT found"
              echo "Users:"
              sudo -u postgres psql -c "\du" | grep postgres && echo "  ‚úì User 'postgres' exists" || echo "  ‚úó User 'postgres' NOT found"
            else
              echo "‚ö†Ô∏è  Skipping database creation due to connection issues"
            fi

            # ---------------------------
            # 8) Tune PostgreSQL config
            # ---------------------------
            echo "Configuring PostgreSQL settings..."
            
            # Detect PostgreSQL version
            PG_VERSION=$(psql --version | grep -oP '\d+' | head -1)
            PG_CONF="/etc/postgresql/${PG_VERSION}/main/postgresql.conf"
            HBA_CONF="/etc/postgresql/${PG_VERSION}/main/pg_hba.conf"
            
            echo "PostgreSQL version detected: ${PG_VERSION}"
            echo "Config file: ${PG_CONF}"
            
            if [ -f "$PG_CONF" ]; then
              echo "Updating postgresql.conf..."
              sudo sed -i "s/^#\?listen_addresses =.*/listen_addresses = 'localhost'/" "$PG_CONF"
              sudo sed -i "s/^#\?max_connections =.*/max_connections = 100/" "$PG_CONF"
              sudo sed -i "s/^#\?shared_buffers =.*/shared_buffers = 256MB/" "$PG_CONF"
              echo "‚úì postgresql.conf updated"
            else
              echo "‚ö† postgresql.conf not found at $PG_CONF"
            fi

            if [ -f "$HBA_CONF" ]; then
              echo "Updating pg_hba.conf..."
              # Backup original
              sudo cp "$HBA_CONF" "${HBA_CONF}.backup.$(date +%Y%m%d)"
              
              # Add authentication rules if they don't exist
              if ! sudo grep -q "^local.*all.*postgres.*md5" "$HBA_CONF"; then
                echo "local   all             postgres                                md5" | sudo tee -a "$HBA_CONF" > /dev/null
                echo "‚úì Added postgres authentication rule"
              fi
              
              if ! sudo grep -q "^local.*all.*all.*md5" "$HBA_CONF"; then
                echo "local   all             all                                     md5" | sudo tee -a "$HBA_CONF" > /dev/null
                echo "‚úì Added all users authentication rule"
              fi
              
              echo "‚úì pg_hba.conf updated"
            else
              echo "‚ö† pg_hba.conf not found at $HBA_CONF"
            fi
            
            echo "Restarting PostgreSQL..."
            sudo systemctl restart postgresql
            sleep 3
            
            # Verify PostgreSQL is running
            if sudo systemctl is-active --quiet postgresql; then
              echo "‚úì PostgreSQL is running"
            else
              echo "‚úó PostgreSQL failed to restart"
            fi

            # ---------------------------
            # 10) Prepare app directories
            # ---------------------------
            echo ""
            echo "============================================="
            echo "Testing database connection..."
            echo "============================================="
            
            if sudo -u postgres psql -d ring -c "SELECT version();" 2>/dev/null; then
              echo "‚úì Successfully connected to 'ring' database (peer authentication)"
              sudo -u postgres psql -d ring -c "SELECT version();" | head -3
            else
              echo "‚ö†Ô∏è Could not connect to database"
              echo "This is not critical - database might be created but connection settings need adjustment"
            fi
            
            # Try with password authentication
            echo ""
            echo "Testing password authentication..."
            if PGPASSWORD=postgres psql -h localhost -U postgres -d ring -c "SELECT 1" >/dev/null 2>&1; then
              echo "‚úì Password authentication works"
            else
              echo "‚ö†Ô∏è Password authentication not working yet (pg_hba.conf may need updating)"
            fi

            # ---------------------------
            # 10) Prepare app directories
            # ---------------------------
            echo "Creating application directories..."
            sudo mkdir -p /var/www/Elden-ATS/{Frontend-ATS,Backend-ATS}
            sudo chown -R ubuntu:ubuntu /var/www/Elden-ATS
            sudo chmod -R 755 /var/www/Elden-ATS
            echo "‚úì Directories created: /var/www/Elden-ATS/"

            # ---------------------------
            # 11) Create default Nginx config if not exists
            # ---------------------------
            NGINX_SITE="/etc/nginx/sites-available/elden-ats"
            if [ ! -f "$NGINX_SITE" ]; then
              echo "Creating Nginx site configuration..."
              sudo tee "$NGINX_SITE" > /dev/null <<'NGINXEOF'
            server {
                listen 80;
                server_name _;

                # Frontend
                root /var/www/Elden-ATS/Frontend-ATS/dist;
                index index.html;

                # Frontend routes
                location / {
                    try_files $uri $uri/ /index.html;
                }

                # Backend API proxy
                location /backend/ {
                    rewrite ^/backend/(.*)$ /$1 break;
                    proxy_pass http://127.0.0.1:8000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                    proxy_read_timeout 300;
                    proxy_connect_timeout 300;
                }

                # Error pages
                error_page 500 502 503 504 /50x.html;
                location = /50x.html {
                    root /usr/share/nginx/html;
                }

                # Logging
                access_log /var/log/nginx/elden-ats-access.log;
                error_log /var/log/nginx/elden-ats-error.log;
            }
            NGINXEOF
              
              sudo ln -sf /etc/nginx/sites-available/elden-ats /etc/nginx/sites-enabled/elden-ats
              sudo rm -f /etc/nginx/sites-enabled/default
              
              echo "Testing Nginx configuration..."
              if sudo nginx -t; then
                echo "‚úì Nginx configuration is valid"
                sudo systemctl restart nginx
                echo "‚úì Nginx restarted"
              else
                echo "‚úó Nginx configuration test failed"
              fi
            else
              echo "‚úì Nginx site configuration already exists"
            fi

            # ---------------------------
            # 12) Python venv + systemd for backend
            # ---------------------------
            VENV_DIR="/var/www/Elden-ATS/Backend-ATS/.venv"
            if [ ! -d "$VENV_DIR" ]; then
              echo "Creating backend Python virtualenv..."
              cd /var/www/Elden-ATS/Backend-ATS
              python3 -m venv .venv
              chown -R ubuntu:ubuntu .venv
              echo "‚úì Virtual environment created"
            else
              echo "‚úì Virtual environment already exists"
            fi

            SERVICE_FILE="/etc/systemd/system/ats-backend.service"
            if [ ! -f "$SERVICE_FILE" ]; then
              echo "Creating systemd service for backend..."
              sudo tee "$SERVICE_FILE" > /dev/null <<'SERVICEEOF'
            [Unit]
            Description=ATS FastAPI backend (uvicorn)
            After=network.target postgresql.service
            Wants=postgresql.service

            [Service]
            Type=simple
            User=ubuntu
            Group=www-data
            WorkingDirectory=/var/www/Elden-ATS/Backend-ATS
            Environment="PATH=/var/www/Elden-ATS/Backend-ATS/.venv/bin"
            Environment="PYTHONUNBUFFERED=1"
            ExecStart=/var/www/Elden-ATS/Backend-ATS/.venv/bin/uvicorn app.main:app --host 127.0.0.1 --port 8000
            Restart=always
            RestartSec=5s

            [Install]
            WantedBy=multi-user.target
            SERVICEEOF
              
              sudo systemctl daemon-reload
              sudo systemctl enable ats-backend
              echo "‚úì Backend service created and enabled"
            else
              echo "‚úì Backend service already exists"
            fi

            # ---------------------------
            # 13) Firewall rules
            # ---------------------------
            if command -v ufw >/dev/null 2>&1; then
              echo "Configuring firewall..."
              sudo ufw allow 'Nginx Full' || true
              sudo ufw allow OpenSSH || true
              sudo ufw --force enable || true
              echo "‚úì Firewall configured"
            else
              echo "‚ö† UFW not available"
            fi

            # ---------------------------
            # 14) Final verification
            # ---------------------------
            echo ""
            echo "=== ‚úÖ EC2 Infra Bootstrap Completed Successfully ==="
            echo ""
            echo "üìä Installation Summary:"
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "üåê Nginx:        $(nginx -v 2>&1)"
            echo "üü¢ Node.js:      $(node -v)"
            echo "üêç Python:       $(python3 --version)"
            echo "üêò PostgreSQL:   $(psql --version)"
            echo "üì¶ Git:          $(git --version)"
            echo ""
            echo "üìÅ Directories:"
            echo "   Frontend:     /var/www/Elden-ATS/Frontend-ATS/"
            echo "   Backend:      /var/www/Elden-ATS/Backend-ATS/"
            echo ""
            echo "üóÑÔ∏è  Database:"
            echo "   Database:     ring"
            echo "   User:         postgres"
            echo "   Password:     postgres"
            echo "   Host:         localhost"
            echo "   Port:         5432"
            echo ""
            echo "üîß Services Status:"
            sudo systemctl is-active nginx && echo "   ‚úì Nginx:      Running" || echo "   ‚úó Nginx:      Stopped"
            sudo systemctl is-active postgresql && echo "   ‚úì PostgreSQL: Running" || echo "   ‚úó PostgreSQL: Stopped"
            sudo systemctl is-enabled ats-backend && echo "   ‚úì Backend:    Enabled (not started yet)" || echo "   ‚úó Backend:    Not enabled"
            echo ""
            echo "üåê Access URLs:"
            PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4 || echo "N/A")
            echo "   Frontend:     http://${PUBLIC_IP}"
            echo "   Backend API:  http://${PUBLIC_IP}/backend/"
            echo "   API Docs:     http://${PUBLIC_IP}/backend/docs"
            echo ""
            echo "üìù Next Steps:"
            echo "   1Ô∏è‚É£  Deploy backend:  Run backend-deploy.yml workflow"
            echo "   2Ô∏è‚É£  Deploy frontend: Run frontend-deploy.yml workflow"
            echo "   3Ô∏è‚É£  Test connection:  curl http://${PUBLIC_IP}"
            echo ""
            echo "üîê Database Connection String:"
            echo "   postgresql://postgres:postgres@localhost:5432/ring"
            echo ""
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "‚úÖ Infrastructure setup complete!"
            echo "==================================================="
